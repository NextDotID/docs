"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[3114],{9613:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,f=u["".concat(p,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2177:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7605),i=(n(9496),n(9613));n(8378);const a={id:"as-intro",title:"Web3 Auth, Auth Service",sidebar_position:2},o=void 0,s={unversionedId:"core-concepts/proof-service/as-intro",id:"core-concepts/proof-service/as-intro",title:"Web3 Auth, Auth Service",description:'As we already built up the connection between avatar and other identities. The idea of letting DApps have its own version of "Sign-in with Google/Twitter" came out naturally. Auth Service is designed to help DApps realize this capability.',source:"@site/docs/core-concepts/proof-service/authservice.md",sourceDirName:"core-concepts/proof-service",slug:"/core-concepts/proof-service/as-intro",permalink:"/core-concepts/proof-service/as-intro",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/core-concepts/proof-service/authservice.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"as-intro",title:"Web3 Auth, Auth Service",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/core-concepts/proof-service/ps-intro"},next:{title:"Decentralized Storage, KV Service",permalink:"/core-concepts/proof-service/ks-intro"}},p={},c=[{value:"How it works",id:"how-it-works",level:2},{value:"Workflow of Auth with 3rd party platform",id:"workflow-of-auth-with-3rd-party-platform",level:3},{value:"Configuration",id:"configuration",level:3},{value:"The Avatar and a subkey that is signed by the avatar:",id:"the-avatar-and-a-subkey-that-is-signed-by-the-avatar",level:4},{value:"OAuth Service configuration",id:"oauth-service-configuration",level:4},{value:"ProofService Endpoint",id:"proofservice-endpoint",level:4},{value:"How to start up an AuthService",id:"how-to-start-up-an-authservice",level:2}],l={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As we already built up the connection between avatar and ",(0,i.kt)("a",{parentName:"p",href:"core-concepts/proof-service/ps-intro#supported-platform"},"other identities"),'. The idea of letting DApps have its own version of "Sign-in with Google/Twitter" came out naturally. Auth Service is designed to help DApps realize this capability.'),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("h3",{id:"workflow-of-auth-with-3rd-party-platform"},"Workflow of Auth with 3rd party platform"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(174).Z,width:"1080",height:"1080"})),(0,i.kt)("p",null,"When a DApp initiates an authorization process, it must specify an ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," instance (We strongly recommend to self-host one) to carry out the authentication. (step 2)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," begins by authenticating the identity using third-party platforms (e.g., Twitter ID).\nOnce authenticated, ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," queries the ",(0,i.kt)("a",{parentName:"p",href:"./ps-intro"},"ProofService")," to check the binding avatar result of this identity. (step 3-4)"),(0,i.kt)("p",null,"If the authenticated identity is associated with an Avatar, and this Avatar aligns with one of the pre-configured Avatars in ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService")," grants the DApp permission to use the Avatar as its identity for a set experimental duration. (step 5-6)"),(0,i.kt)("p",null,"This authorization is confirmed by signing a message. Instead of using the Avatar itself for this purpose, we introduce a 'subkey' to sign the message (this will be elaborated further in subsequent sections)(step 7)."),(0,i.kt)("p",null,"The process concludes by redirecting to the DApp with the following parameters(step 8):"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"avatar")," (string, required): Avatar public key hex string."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"expired_at")," (string, required): UNIX timestamp."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"state")," (string, required): State string passed from dApp."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"subkey")," (string, required): Subkey public key hex string."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"subkey_cert_sig")," (string, required): Subkey certification signature signed by Avatar, encoded in Base58."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"sig")," (string, required): Signature of ",(0,i.kt)("inlineCode",{parentName:"li"},"avatar=${avatar}\\nredirect_uri={redirect_uri}\\nexpired_at=${expired_at}\\nstate=${state}")," singed by Subkey, encoded in Base58.")),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Understanding how it operates, the preliminary step before launching an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Auth Service")," is to prepare a configuration file.There are three parts. "),(0,i.kt)("h4",{id:"the-avatar-and-a-subkey-that-is-signed-by-the-avatar"},"The Avatar and a subkey that is signed by the avatar:"),(0,i.kt)("p",null,"In the configuration, the list of avatars represents the identity that can be authenticated by this instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthService"),". The private key is used to sign ta message, proving the ownership of the avatar. We strongly recommend using a subkey that is signed by the avatar instead of the avatar itself in the configuration. For enhanced security, it's advisable to generate a unique subkey for specific cases. This not only tailors the security to the situation but also minimizes the risk of exposing the avatar's private key."),(0,i.kt)("p",null,"Run the following command with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nextdotid/auth_server/blob/develop/build/generate_subkey.py"},"generate_subkey.py")," to generate a new subkey and sign it with your Avatar private key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install base58 eth_keys # skip if installed\npython ./build/generate_subkey.py\n")),(0,i.kt)("p",null,"Subkey is randomly generated so that you can regenerate and use a new subkey at any time."),(0,i.kt)("h4",{id:"oauth-service-configuration"},"OAuth Service configuration"),(0,i.kt)("p",null,"In order to use the Oauth Service of Twitter/Discord/..., configurations like the following are necessary to be pre-configured in the AuthService (the platform depends on you, only need to put the configurations that you want to support)."),(0,i.kt)("h4",{id:"proofservice-endpoint"},"ProofService Endpoint"),(0,i.kt)("p",null,"The endpoint of ",(0,i.kt)("inlineCode",{parentName:"p"},"ProofService")," is configured to allow AuthService to retrieve the connections between the avatar and other identities."),(0,i.kt)("p",null,"The example of the whole configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Avatars": [\n      {\n        "Avatar": "avatar-public-key",\n        "Subkey": {\n          "PrivateKey": "the-private-key-that-signed-by-avatar",\n          "CertificationSignature": "signature-that-signed-by-avatar"\n        }\n      }\n  ],\n  "Proof": {\n    "Endpoint": "https://proof-service.nextnext.id/"\n  },\n  "Discord": {\n    "ClientID": "123456789012345678",\n    "ClientSecret": "123456789012345678"\n  },\n  "Twitter": {\n    "ClientID": "aBcDEFG...",\n    "ClientSecret": "Hij123456..."\n  }\n  // ...\n}\n')),(0,i.kt)("h2",{id:"how-to-start-up-an-authservice"},"How to start up an AuthService"),(0,i.kt)("p",null,"After preparing the configuration file, we can run it with docker.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NextDotID/auth_server#deployment"},"The auth service source code and instructor on how to run it with docker")),(0,i.kt)("p",null,"Firstly, build the Docker image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t authserver -f ./src/AuthServer.Server/Dockerfile .\n")),(0,i.kt)("p",null,"Run the following command to run it once, replace ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/appsettings.Production.json")," with your own configuration file path."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -p 80:80 -v /path/to/appsettings.Production.json:/app/appsettings.Production.json authserver\n")))}d.isMDXComponent=!0},174:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/authservice-workflow-f5a91d7d24fdd1c321158852ac04ff0b.png"},8378:(e,t,n)=>{n(9496)}}]);