"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[6835],{3881:(e,n,d)=>{d.d(n,{R:()=>t,x:()=>c});var i=d(8101);const s={},r=i.createContext(s);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(r.Provider,{value:n},e.children)}},7419:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>o,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"core-concepts/relation-service/rs-example","title":"Query from Graph Database","description":"Here are some query use cases for reference.","source":"@site/docs/core-concepts/relation-service/exampleQuery.md","sourceDirName":"core-concepts/relation-service","slug":"/core-concepts/relation-service/rs-example","permalink":"/core-concepts/relation-service/rs-example","draft":false,"unlisted":false,"editUrl":"https://github.com/nextdotid/docs/edit/main/docs/core-concepts/relation-service/exampleQuery.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"rs-example","title":"Query from Graph Database","sidebar_position":3},"sidebar":"docs","previous":{"title":"GraphDB","permalink":"/core-concepts/relation-service/rs-graphdb"},"next":{"title":"Introduction","permalink":"/core-concepts/core-service/cs-intro"}}');var s=d(5105),r=d(3881);const t={id:"rs-example",title:"Query from Graph Database",sidebar_position:3},c=void 0,l={},h=[{value:"Query Type",id:"query-type",level:3},{value:"Schema Types and Fields",id:"schema-types-and-fields",level:2},{value:"<code>IdentityRecord</code> &amp; <code>IdentityRecordSimplified</code>",id:"identityrecord--identityrecordsimplified",level:3},{value:"<code>IdentityGraph</code>",id:"identitygraph",level:3},{value:"<code>EdgeType</code>",id:"edgetype",level:3},{value:"Example Queries",id:"example-queries",level:2},{value:"Domain Available Search",id:"domain-available-search",level:3},{value:"Single Identity Query",id:"single-identity-query",level:3},{value:"Batch Identity Query",id:"batch-identity-query",level:3},{value:"<code>ids</code> format",id:"ids-format",level:3},{value:"Example",id:"example",level:3},{value:"Additional Notes for Developers",id:"additional-notes-for-developers",level:2}];function a(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Here are some query use cases for reference."}),"\n",(0,s.jsx)(n.h3,{id:"query-type",children:"Query Type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"identities"}),": Fetch multiple identities based on platform and list of identity strings."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"identity"}),": Fetch a single identity record based on platform and identity string."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"domainAvailableSearch"}),": Fetch a list of domain with difference postfix on all platforms which has been taken or not."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"schema-types-and-fields",children:"Schema Types and Fields"}),"\n",(0,s.jsxs)(n.h3,{id:"identityrecord--identityrecordsimplified",children:[(0,s.jsx)(n.code,{children:"IdentityRecord"})," & ",(0,s.jsx)(n.code,{children:"IdentityRecordSimplified"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Represents detailed information about a single identity."})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{children:"Unique identifier for the identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"identity"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{children:"The string representation of the identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"platform"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Platform!"})}),(0,s.jsxs)(n.td,{children:["Platform type (e.g., ",(0,s.jsx)(n.code,{children:"ethereum"}),", ",(0,s.jsx)(n.code,{children:"ens"}),", ",(0,s.jsx)(n.code,{children:"farcaster"}),", ",(0,s.jsx)(n.code,{children:"lens"})," )."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"network"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Network"})}),(0,s.jsx)(n.td,{children:"The network on which the identity exists on chain."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"primaryName"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:"Primary name associated with the identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"isPrimary"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Boolean!"})}),(0,s.jsx)(n.td,{children:"Indicates if this is the primary identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"resolvedAddress"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[Address!]!"})}),(0,s.jsx)(n.td,{children:"List of resolved addresses for this identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ownerAddress"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[Address!]!"})}),(0,s.jsx)(n.td,{children:"List of owner addresses for this identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"expiredAt"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"datetime"})}),(0,s.jsx)(n.td,{children:"Expiration date of the identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"profile"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Profile"})}),(0,s.jsx)(n.td,{children:"Profile information associated with the identity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"identityGraph"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"IdentityGraph"})}),(0,s.jsxs)(n.td,{children:["Connections and relationships of the identity in graph format. Notice: ",(0,s.jsx)(n.code,{children:"IdentityRecordSimplified"})," don\u2019t have field ",(0,s.jsx)(n.code,{children:"identityGraph"})]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"identitygraph",children:(0,s.jsx)(n.code,{children:"IdentityGraph"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Represents relationships and connections for an identity."})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"graphId"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{children:"Unique identifier for the identity graph."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vertices"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[IdentityRecordSimplified!]!"})}),(0,s.jsx)(n.td,{children:"List of connected identities."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"edges"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[IdentityConnection!]!"})}),(0,s.jsx)(n.td,{children:"Connections between the identities (edges in the graph)."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"edgetype",children:(0,s.jsx)(n.code,{children:"EdgeType"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Represents relationships and connections for an identity."})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Hold"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{children:"e.g. Address Hold Domain"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Resolve"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{children:"e.g. A domain resolve to an address"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Reverse_Resolve"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsxs)(n.td,{children:["e.g. An address set reverse resolve to a domain, It can also be said to be ",(0,s.jsx)(n.code,{children:"primary_name"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Auth"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{children:"e.g. OAuth account connections"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Proof"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String!"})}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"example-queries",children:"Example Queries"}),"\n",(0,s.jsx)(n.h3,{id:"domain-available-search",children:"Domain Available Search"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query SearchDomainAvailable {\n  domainAvailableSearch(name: "blockchain") {\n    platform\n    name\n    tld\n    expiredAt\n    availability\n    status // taken/protected/available/unavailable\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"single-identity-query",children:"Single Identity Query"}),"\n",(0,s.jsxs)(n.p,{children:["Fetches a specific ENS identity (e.g., ",(0,s.jsx)(n.code,{children:"sujiyan.eth"}),") and includes identity connections through the ",(0,s.jsx)(n.code,{children:"identityGraph"})," field."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query FindIdentityWithIdentityGraph{\n  identity(platform: ens, identity: "vitalik.eth") {\n    id\n    status\n    aliases\n    identity\n    platform\n    network\n    isPrimary\n    primaryName\n    registeredAt\n    managerAddress {\n      address\n      network\n    }\n    resolvedAddress {\n      address\n      network\n    }\n    ownerAddress {\n      address\n      network\n    }\n    updatedAt\n    expiredAt\n    profile {\n      uid\n      identity\n      platform\n      network\n      address\n      displayName\n      avatar\n      description\n      texts\n      contenthash\n      addresses {\n        address\n        network\n      }\n      social {\n        uid\n        follower\n        following\n      }\n    }\n    identityGraph {\n      graphId\n      vertices {\n        id\n        status\n        aliases\n        identity\n        platform\n        network\n        isPrimary\n        primaryName\n        registeredAt\n        managerAddress {\n          address\n          network\n        }\n        resolvedAddress {\n          address\n          network\n        }\n        ownerAddress {\n          address\n          network\n        }\n        expiredAt\n        profile {\n          uid\n          identity\n          platform\n          network\n          address\n          displayName\n          avatar\n          description\n          texts\n          addresses {\n            address\n            network\n          }\n          social {\n            uid\n            follower\n            following\n          }\n        }\n      }\n      edges {\n        source\n        target\n        dataSource\n        edgeType\n      }\n    }\n  }\n}\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"batch-identity-query",children:"Batch Identity Query"}),"\n",(0,s.jsxs)(n.p,{children:["Fetches multiple identities by ",(0,s.jsx)(n.code,{children:"ids"})," (which id is unique in web3bio)and returns ",(0,s.jsx)(n.code,{children:"IdentityRecordSimplified"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"ids-format",children:[(0,s.jsx)(n.code,{children:"ids"})," format"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.code,{children:"Platform"})}),(0,s.jsx)(n.th,{children:"identity"}),(0,s.jsx)(n.th,{children:"id"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ethereum"}),(0,s.jsx)(n.td,{children:"address"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ethereum,address"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ens"}),(0,s.jsx)(n.td,{children:"name.eth"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ens,name.eth"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"farcaster"}),(0,s.jsx)(n.td,{children:"fname"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"farcaster,fname"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"farcaster"}),(0,s.jsx)(n.td,{children:"fid"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"farcaster,#fid"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"farcaster"}),(0,s.jsx)(n.td,{children:"address"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"farcaster,address"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"lens"}),(0,s.jsx)(n.td,{children:"handle.lens"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"lens,handle.lens"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"lens"}),(0,s.jsx)(n.td,{children:"profileId"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"lens,#profileId"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"lens"}),(0,s.jsx)(n.td,{children:"address"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"lens,address"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"clusters"}),(0,s.jsx)(n.td,{children:"name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"clusters,name"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"basenames"}),(0,s.jsx)(n.td,{children:"name.base.eth"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"basenames,name.base.eth"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"solana"}),(0,s.jsx)(n.td,{children:"address"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"solana,address"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sns"}),(0,s.jsx)(n.td,{children:"name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sns,name.sol"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sns"}),(0,s.jsx)(n.td,{children:"address"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sns,address"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"..."}),(0,s.jsx)(n.td,{children:"..."}),(0,s.jsx)(n.td,{children:"..."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query BatchQueryIdentities {\n  identities(ids:[\n    "ethereum,0xd8da6bf26964af9d7eed9e03e53415d37aa96045",\n    "ens,vitalik.eth",\n    "farcaster,dwr.eth",\n    "lens,stani.lens",\n    "sns,bonfida.sol",\n    "ens,josh.box",\n    "basenames,jesse.base.eth",\n    "linea,joseph.linea.eth",\n    "dotbit,firstbit.bit",\n    "unstoppabledomains,matthew.crypto",\n    "space_id,blockchain.bnb"\n    // Add more identities here...\n  ]\n  ) {\n    id\n    status\n    aliases\n    identity\n    platform\n    network\n    isPrimary\n    primaryName\n    registeredAt\n    managerAddress {\n      address\n      network\n    }\n    resolvedAddress {\n      address\n      network\n    }\n    ownerAddress {\n      address\n      network\n    }\n    updatedAt\n    expiredAt\n    profile {\n      uid\n      identity\n      platform\n      network\n      address\n      displayName\n      avatar\n      description\n      texts\n      contenthash\n      addresses {\n        address\n        network\n      }\n      social {\n        uid\n        follower\n        following\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"additional-notes-for-developers",children:"Additional Notes for Developers"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Structures"}),": The ",(0,s.jsx)(n.code,{children:"IdentityRecord"})," fields contain nested data structures, including addresses and social connections. Make sure to map these fields correctly in your frontend data models."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Queries"}),": The ",(0,s.jsx)(n.code,{children:"identities"})," query allows for batch retrieval of identity records, which is efficient for displaying multiple identity profiles at once."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Graph Data"}),": The ",(0,s.jsx)(n.code,{children:"identityGraph"})," provides connection data (vertices and edges) that can be visualized as a network graph, offering insights into how identities are interrelated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Date Handling"}),": The ",(0,s.jsx)(n.code,{children:"Date"})," field is in ",(0,s.jsx)(n.code,{children:"bitint"})," format, so consider using date libraries for handling and formatting in the frontend."]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);