"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[6081],{146:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/revoke-binding-f1008cc1addf99d2a650c3d98901ab6a.png"},3094:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/write-data-a09bcda7990a86b7dd50bc1a0676161d.png"},3599:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/ethereum-binding-6f923b29a476f38b32fa74caf033d85a.png"},3881:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>r});var n=i(8101);const a={},o=n.createContext(a);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:t},e.children)}},7137:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/avatar-diagram-ed9b76208873c99d320131960efdbc02.png"},7318:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"introduction/how-it-works","title":"How Next.ID works","description":"Here, we\'ll go through the core system design concepts of Next.ID and DIDs.","source":"@site/docs/introduction/how-it-works.md","sourceDirName":"introduction","slug":"/introduction/how-it-works","permalink":"/introduction/how-it-works","draft":false,"unlisted":false,"editUrl":"https://github.com/nextdotid/docs/edit/main/docs/introduction/how-it-works.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"how-it-works","title":"How Next.ID works","sidebar_position":2},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/"},"next":{"title":"Twitter-Wallet Binding","permalink":"/getting-started/twitter-wallet-binding"}}');var a=i(5105),o=i(3881);const s={id:"how-it-works",title:"How Next.ID works",sidebar_position:2},r=void 0,c={},d=[{value:"Avatars in Next.ID",id:"avatars-in-nextid",level:2},{value:"ProofService",id:"proofservice",level:2},{value:"Binding an Avatar to an Application",id:"binding-an-avatar-to-an-application",level:3},{value:"Binding an Avatar to an Application via Ethereum wallet",id:"binding-an-avatar-to-an-application-via-ethereum-wallet",level:3},{value:"Revoke Binding",id:"revoke-binding",level:3},{value:"KVService",id:"kvservice",level:2},{value:"Write Data",id:"write-data",level:3}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Here, we'll go through the core system design concepts of Next.ID and DIDs."}),"\n",(0,a.jsx)(t.h2,{id:"avatars-in-nextid",children:"Avatars in Next.ID"}),"\n",(0,a.jsxs)(t.p,{children:["Using the secp256k1 curve with the ECDSA algorithm, avatar key pairs are generated for actions on Next.ID (e.g., signing a follow action) applicable to both on-chain and off-chain activities. Next.ID's relation aggregation can map all these actions:\n",(0,a.jsx)(t.img,{src:i(7137).A+"",width:"2422",height:"1715"})]}),"\n",(0,a.jsx)(t.h2,{id:"proofservice",children:(0,a.jsx)(t.a,{href:"/core-concepts/proof-service/ps-intro",children:"ProofService"})}),"\n",(0,a.jsx)(t.h3,{id:"binding-an-avatar-to-an-application",children:(0,a.jsx)(t.a,{href:"/getting-started/twitter-wallet-binding",children:"Binding an Avatar to an Application"})}),"\n",(0,a.jsxs)(t.p,{children:["In this scenario, the user requests an Avatar Binding to an Application, allowing an Avatar to be bound to a user account on the Application.\xa0",(0,a.jsx)(t.code,{children:"ProofService"}),"\xa0returns\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"\xa0and post-content based on the Application\u2019s\xa0",(0,a.jsx)(t.code,{children:"POST /v1/proof/payload"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Then, the Application requests for the user\u2019s Avatar's Private Key to generate a signature based on\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),". Following which, the user publishes the Proof Post on target platforms. The Proof Post link and ID with\xa0",(0,a.jsx)(t.code,{children:"uuid"}),"\xa0and\xa0",(0,a.jsx)(t.code,{children:"created_at"}),"\xa0will be sent to\xa0",(0,a.jsx)(t.code,{children:"ProofService"}),"\xa0per request and be verified from the Application\u2019s post-content."]}),"\n",(0,a.jsxs)(t.p,{children:["After\xa0",(0,a.jsx)(t.code,{children:"ProofService"}),"\xa0validates the Proof Post's existence and verifies the Private Key, it will relay the successful binding notification back to Application and User."]}),"\n",(0,a.jsxs)(t.p,{children:["Example of how it will look like to a user:\xa0The user requests for an account (eg: @nextdotid on Twitter) to be bound to their Avatar. The user signs a transaction to authenticate ownership of the account of the Twitter account. Thzte Avatar then generates a public tweet with a signature. When published by the user, this tweet, along with the signature, independently verifies the user's linking of the account to the Avatar.\n",(0,a.jsx)(t.img,{src:i(9609).A+"",width:"1186",height:"676"})]}),"\n",(0,a.jsx)(t.h3,{id:"binding-an-avatar-to-an-application-via-ethereum-wallet",children:"Binding an Avatar to an Application via Ethereum wallet"}),"\n",(0,a.jsxs)(t.p,{children:["In this scenario, the user requests an Avatar Binding to an Application with identity\xa0",(0,a.jsx)(t.code,{children:"0xWALLET_ADDRESS"}),".\xa0",(0,a.jsx)(t.code,{children:"ProofService"}),"\xa0will return the Avatar's\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"\xa0based on the Application\u2019s\xa0",(0,a.jsx)(t.code,{children:"POST /v1/proof/payload"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Then, the Application requests the user\u2019s Avatar's Private Key to generate a signature based on Avatar",(0,a.jsx)(t.code,{children:"sign_payload"}),". After that, the Application requests user\u2019s Wallet's Private Key to generate a signature based on Wallet",(0,a.jsx)(t.code,{children:"sign_payload"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"ProofService"}),"validates the\xa0",(0,a.jsx)(t.code,{children:"uuid"}),"\xa0and\xa0",(0,a.jsx)(t.code,{children:"created_at"}),"\xa0with\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),", then verifies the Avatar's and Wallet's signature. After this, it will relay the successful binding notification back to the Application and User.\n",(0,a.jsx)(t.img,{src:i(3599).A+"",width:"1186",height:"676"})]}),"\n",(0,a.jsx)(t.h3,{id:"revoke-binding",children:"Revoke Binding"}),"\n",(0,a.jsxs)(t.p,{children:["In this scenario, User revokes a previously-established Binding made with an Application.\xa0",(0,a.jsx)(t.code,{children:"ProofService"}),"\xa0will return the Avatar's\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"\xa0based on the Application\u2019s\xa0",(0,a.jsx)(t.code,{children:"POST /v1/proof/payload"}),"\xa0as a Revoke action."]}),"\n",(0,a.jsxs)(t.p,{children:["Then, the Application requests the user\u2019s Avatar Private Key to generate a signature based on\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["After\xa0",(0,a.jsx)(t.code,{children:"ProofService"}),"validates the signature with\xa0",(0,a.jsx)(t.code,{children:"uuid"}),"\xa0and\xa0",(0,a.jsx)(t.code,{children:"created_at"}),"\xa0from\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"\xa0, it verifies the Avatar's and Wallet's signatures for a Revoke action. When this is done, it will relay the successful Revoke notification back to the Application and user.\n",(0,a.jsx)(t.img,{src:i(146).A+"",width:"1186",height:"676"})]}),"\n",(0,a.jsx)(t.h2,{id:"kvservice",children:(0,a.jsx)(t.a,{href:"/core-concepts/proof-service/ks-intro",children:"KVService"})}),"\n",(0,a.jsx)(t.h3,{id:"write-data",children:(0,a.jsx)(t.a,{href:"../core-concepts/proof-service/ks-intro#work-flow-for-writing",children:"Write Data"})}),"\n",(0,a.jsxs)(t.p,{children:["In this scenario, User requests for a modification on an Application.\xa0",(0,a.jsx)(t.code,{children:"KVService"}),"\xa0will return the\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"\xa0based on the Application\u2019s\xa0",(0,a.jsx)(t.code,{children:"POST /v1/KV/payload"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Then, the application requests the user\u2019s Avatar's Private Key to generate a signature based on\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["After\xa0",(0,a.jsx)(t.code,{children:"KVService"}),"\xa0validates the signature with\xa0",(0,a.jsx)(t.code,{children:"uuid"}),"\xa0and\xa0",(0,a.jsx)(t.code,{children:"created_at"}),"\xa0from\xa0",(0,a.jsx)(t.code,{children:"sign_payload"}),"\xa0, it will then verify the Avatar Signature for the Write Data action. After that, it will relay the successful notification back to Application and User.\n",(0,a.jsx)(t.img,{src:i(3094).A+"",width:"1186",height:"676"})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},9609:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/platform-binding-0331240b6a6400bc2a2f825f72083444.png"}}]);