"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[3923],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),y=i,f=c["".concat(d,".").concat(y)]||c[y]||u[y]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=y;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7263),i=(n(9496),n(9613));n(8378);const a={id:"rs-example",title:"Query from Graph Database",sidebar_position:3},o=void 0,s={unversionedId:"core-concepts/relation-service/rs-example",id:"core-concepts/relation-service/rs-example",title:"Query from Graph Database",description:"Here are some query use cases for reference.",source:"@site/docs/core-concepts/relation-service/exampleQuery.md",sourceDirName:"core-concepts/relation-service",slug:"/core-concepts/relation-service/rs-example",permalink:"/core-concepts/relation-service/rs-example",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/core-concepts/relation-service/exampleQuery.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"rs-example",title:"Query from Graph Database",sidebar_position:3},sidebar:"docs",previous:{title:"GraphDB",permalink:"/core-concepts/relation-service/rs-graphdb"},next:{title:"Introduction",permalink:"/core-concepts/core-service/cs-intro"}},d={},l=[{value:"Query an identity (w/ its relations to other identitites)",id:"query-an-identity-w-its-relations-to-other-identitites",level:3},{value:"Query a list of identities (w/ its relations to other identitites and their sources)",id:"query-a-list-of-identities-w-its-relations-to-other-identitites-and-their-sources",level:3},{value:"Query an NFT (w/ its owner, owner&#39;s other NFTs, and owner&#39;s related identites)",id:"query-an-nft-w-its-owner-owners-other-nfts-and-owners-related-identites",level:3},{value:"Query the NFT Assets that Owned by an identity",id:"query-the-nft-assets-that-owned-by-an-identity",level:3},{value:"Query an identity (w/ its relations and potential NFTs)",id:"query-an-identity-w-its-relations-and-potential-nfts",level:3}],p={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Here are some query use cases for reference."),(0,i.kt)("h3",{id:"query-an-identity-w-its-relations-to-other-identitites"},"Query an identity (w/ its relations to other identitites)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query findOneIdentity {\n  identity(platform: "twitter", identity: "suji_yan") {\n    uuid\n    platform\n    identity\n    displayName\n    createdAt\n    addedAt\n    updatedAt\n    # Here we perform a 3-depth deep search for this identity\'s "neighbor".\n    neighborWithTraversal(depth: 5) {\n      # neighbor returns is EdgeUnion, your should define every type of EdgeUnion\'s fields\n      ... on ProofRecord {\n        __typename\n        source # Which upstream provides this connection info.\n        from {\n          uuid\n          platform\n          identity\n          displayName\n        }\n        to {\n          uuid\n          platform\n          identity\n          displayName\n        }\n      }\n      ... on HoldRecord {\n        __typename\n        source\n        from {\n          uuid\n          platform\n          identity\n          displayName\n        }\n        to {\n          uuid\n          platform\n          identity\n          displayName\n        }\n      }\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"query-a-list-of-identities-w-its-relations-to-other-identitites-and-their-sources"},"Query a list of identities (w/ its relations to other identitites and their sources)"),(0,i.kt)("p",null,"If you don't need to rebuild the relation graph, just want to get a list of nodes, or just want to know which upstream (sources) provides this connection info."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query findOneIdentityWithSource {\n  identity(platform: "twitter", identity: "suji_yan") {\n    uuid\n    platform\n    identity\n    displayName\n    createdAt\n    addedAt\n    updatedAt\n    # Here we perform a 3-depth deep search for this identity\'s "neighbor".\n    neighbor(depth: 5) {\n      sources # Which upstreams provide these connection infos.\n      identity {\n        uuid\n        platform\n        identity\n        displayName\n      }\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"query-an-nft-w-its-owner-owners-other-nfts-and-owners-related-identites"},"Query an NFT (w/ its owner, owner's other NFTs, and owner's related identites)"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"nft")," field will possibly have value only when its parent identity is ",(0,i.kt)("inlineCode",{parentName:"p"},"platform: ethereum"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query findOneNFTWithOwnerNeighbor {\n  nft(chain: "ethereum", category: ENS, id: "sujiyan.eth") {\n    owner {\n      platform\n      identity\n      nft {\n        category\n        chain\n        id\n      }\n      neighborWithTraversal(depth: 5) {\n        ... on ProofRecord {\n          source\n          from {\n            platform\n            identity\n            uuid\n          }\n          to {\n            platform\n            identity\n            uuid\n          }\n        }\n        ... on HoldRecord {\n          source\n          from {\n            platform\n            identity\n            uuid\n          }\n          to {\n            platform\n            identity\n            uuid\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"query-the-nft-assets-that-owned-by-an-identity"},"Query the NFT Assets that Owned by an identity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query findIdentityNFTAssets {\n  identity(platform: "ethereum", identity: "0x934b510d4c9103e6a87aef13b816fb080286d649") {\n    uuid\n    platform\n    identity\n    displayName\n    createdAt\n    addedAt\n    updatedAt\n    nft {\n      id\n      category\n      address\n      chain\n      source\n    }\n  }\n}\n')),(0,i.kt)("h3",{id:"query-an-identity-w-its-relations-and-potential-nfts"},"Query an identity (w/ its relations and potential NFTs)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query findOneIdentityWithNFT {\n  identity(platform: "twitter", identity: "suji_yan") {\n    uuid\n    platform\n    identity\n    displayName\n    createdAt\n    addedAt\n    updatedAt\n    neighbor(depth: 5) {\n      sources\n      identity {\n        uuid\n        platform\n        identity\n        displayName\n        nft {\n          id\n          category\n          address\n          chain\n          source\n        }\n      }\n    }\n  }\n}\n')))}u.isMDXComponent=!0},8378:(e,t,n)=>{n(9496)}}]);