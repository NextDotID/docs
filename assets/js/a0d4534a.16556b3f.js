"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[5389],{3881:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(8101);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},6220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"developer-guide/go","title":"Go","description":"Proof Service","source":"@site/docs/developer-guide/go.md","sourceDirName":"developer-guide","slug":"/developer-guide/go","permalink":"/developer-guide/go","draft":false,"unlisted":false,"editUrl":"https://github.com/nextdotid/docs/edit/main/docs/developer-guide/go.md","tags":[],"version":"current","frontMatter":{"title":"Go"}}');var o=t(5105),i=t(3881);const s={title:"Go"},a=void 0,c={},d=[{value:"Proof Service",id:"proof-service",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"proof-service",children:"Proof Service"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["You can git clone and run ",(0,o.jsx)(n.a,{href:"https://github.com/nextdotid/Signature-Generating-Sample/tree/main/go",children:"Go open demo"})," for help."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The core example of codes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",metastring:'title="cmd/playground.go"',children:'package main\n\nimport (\n\t"crypto/ecdsa"\n\t"fmt"\n\n\t"github.com/ethereum/go-ethereum/common/hexutil"\n\t"github.com/ethereum/go-ethereum/crypto"\n)\n\nconst (\n\t// ATTENTION! We intently replaced the last three digit of private key to be xxx.\n\t// Private key is everything and NEVER expose it to others or publicly\n\tSECRET_KEY   = "43c25fecc20e6b2a0d86c81a0202d125c0181deb9975d1170d80378c7e05bxxx"\n\tSIGN_PAYLOAD = "Test123123!"\n)\n\nfunc main() {\n\tsk, err := crypto.HexToECDSA(SECRET_KEY)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsign, err := signPersonal([]byte(SIGN_PAYLOAD), sk)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf("Signature: %s\\n", hexutil.Encode(sign))\n\t// Signature: 0x52f210dadad13c4c8d0656e7380300a367a056631cf26950baa7de4f580187795c76b5fc94de5bd0b8af4d5df432687d900402cba86a12570af56be35ba8d56401\n}\n\n// signPersonal signs a payload using given secret key.\nfunc signPersonal(payload []byte, sk *ecdsa.PrivateKey) (signature []byte, err error) {\n\tdigest := signPersonalDigest(payload)\n\tsignature, err = crypto.Sign(digest, sk)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn signature, nil\n}\n\n// signPersonalDigest hashes the given payload with eth.personal.sign struct.\nfunc signPersonalDigest(data []byte) []byte {\n\tmesssage := fmt.Sprintf("\\x19Ethereum Signed Message:\\n%d%s", len(data), data)\n\treturn crypto.Keccak256([]byte(messsage))\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);