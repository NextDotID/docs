"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[7942],{1660:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"core-concepts/proof-service/as-intro","title":"Web3 Auth, Auth Service","description":"As we already built up the connection between avatar and other identities. The idea of letting DApps have its own version of \\"Sign-in with Google/Twitter\\" came out naturally. Auth Service is designed to help DApps realize this capability.","source":"@site/docs/core-concepts/proof-service/authservice.md","sourceDirName":"core-concepts/proof-service","slug":"/core-concepts/proof-service/as-intro","permalink":"/core-concepts/proof-service/as-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/nextdotid/docs/edit/main/docs/core-concepts/proof-service/authservice.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"as-intro","title":"Web3 Auth, Auth Service","sidebar_position":2},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/core-concepts/proof-service/ps-intro"},"next":{"title":"Decentralized Storage, KV Service","permalink":"/core-concepts/proof-service/ks-intro"}}');var r=i(5105),s=i(3881);const o={id:"as-intro",title:"Web3 Auth, Auth Service",sidebar_position:2},a=void 0,c={},h=[{value:"How it works",id:"how-it-works",level:2},{value:"Workflow of Auth with 3rd party platform",id:"workflow-of-auth-with-3rd-party-platform",level:3},{value:"Configuration",id:"configuration",level:3},{value:"The Avatar and a subkey that is signed by the avatar:",id:"the-avatar-and-a-subkey-that-is-signed-by-the-avatar",level:4},{value:"OAuth Service configuration",id:"oauth-service-configuration",level:4},{value:"ProofService Endpoint",id:"proofservice-endpoint",level:4},{value:"How to start up an AuthService",id:"how-to-start-up-an-authservice",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["As we already built up the connection between avatar and ",(0,r.jsx)(t.a,{href:"https://github.com/NextDotID/proof_server#supported",children:"other identities"}),'. The idea of letting DApps have its own version of "Sign-in with Google/Twitter" came out naturally. Auth Service is designed to help DApps realize this capability.']}),"\n",(0,r.jsx)(t.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,r.jsx)(t.h3,{id:"workflow-of-auth-with-3rd-party-platform",children:"Workflow of Auth with 3rd party platform"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:i(9762).A+"",width:"1080",height:"1080"})}),"\n",(0,r.jsxs)(t.p,{children:["When a DApp initiates an authorization process, it must specify an ",(0,r.jsx)(t.code,{children:"AuthService"})," instance (We strongly recommend to self-host one) to carry out the authentication. (step 2)"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"AuthService"})," begins by authenticating the identity using third-party platforms (e.g., Twitter ID).\nOnce authenticated, ",(0,r.jsx)(t.code,{children:"AuthService"})," queries the ",(0,r.jsx)(t.a,{href:"./ps-intro",children:"ProofService"})," to check the binding avatar result of this identity. (step 3-4)"]}),"\n",(0,r.jsxs)(t.p,{children:["If the authenticated identity is associated with an Avatar, and this Avatar aligns with one of the pre-configured Avatars in ",(0,r.jsx)(t.code,{children:"AuthService"}),", then ",(0,r.jsx)(t.code,{children:"AuthService"})," grants the DApp permission to use the Avatar as its identity for a set experimental duration. (step 5-6)"]}),"\n",(0,r.jsx)(t.p,{children:"This authorization is confirmed by signing a message. Instead of using the Avatar itself for this purpose, we introduce a 'subkey' to sign the message (this will be elaborated further in subsequent sections)(step 7)."}),"\n",(0,r.jsx)(t.p,{children:"The process concludes by redirecting to the DApp with the following parameters(step 8):"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"avatar"})," (string, required): Avatar public key hex string."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"expired_at"})," (string, required): UNIX timestamp."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"state"})," (string, required): State string passed from dApp."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"subkey"})," (string, required): Subkey public key hex string."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"subkey_cert_sig"})," (string, required): Subkey certification signature signed by Avatar, encoded in Base58."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sig"})," (string, required): Signature of ",(0,r.jsx)(t.code,{children:"avatar=${avatar}\\nredirect_uri={redirect_uri}\\nexpired_at=${expired_at}\\nstate=${state}"})," singed by Subkey, encoded in Base58."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["Understanding how it operates, the preliminary step before launching an instance of ",(0,r.jsx)(t.code,{children:"Auth Service"})," is to prepare a configuration file.There are three parts."]}),"\n",(0,r.jsx)(t.h4,{id:"the-avatar-and-a-subkey-that-is-signed-by-the-avatar",children:"The Avatar and a subkey that is signed by the avatar:"}),"\n",(0,r.jsxs)(t.p,{children:["In the configuration, the list of avatars represents the identity that can be authenticated by this instance of ",(0,r.jsx)(t.code,{children:"AuthService"}),". The private key is used to sign ta message, proving the ownership of the avatar. We strongly recommend using a subkey that is signed by the avatar instead of the avatar itself in the configuration. For enhanced security, it's advisable to generate a unique subkey for specific cases. This not only tailors the security to the situation but also minimizes the risk of exposing the avatar's private key."]}),"\n",(0,r.jsxs)(t.p,{children:["Run the following command with ",(0,r.jsx)(t.a,{href:"https://github.com/nextdotid/auth_server/blob/develop/build/generate_subkey.py",children:"generate_subkey.py"})," to generate a new subkey and sign it with your Avatar private key:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"pip install base58 eth_keys # skip if installed\npython ./build/generate_subkey.py\n"})}),"\n",(0,r.jsx)(t.p,{children:"Subkey is randomly generated so that you can regenerate and use a new subkey at any time."}),"\n",(0,r.jsx)(t.h4,{id:"oauth-service-configuration",children:"OAuth Service configuration"}),"\n",(0,r.jsx)(t.p,{children:"In order to use the Oauth Service of Twitter/Discord/..., configurations like the following are necessary to be pre-configured in the AuthService (the platform depends on you, only need to put the configurations that you want to support)."}),"\n",(0,r.jsx)(t.h4,{id:"proofservice-endpoint",children:"ProofService Endpoint"}),"\n",(0,r.jsxs)(t.p,{children:["The endpoint of ",(0,r.jsx)(t.code,{children:"ProofService"})," is configured to allow AuthService to retrieve the connections between the avatar and other identities."]}),"\n",(0,r.jsx)(t.p,{children:"The example of the whole configuration:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "Avatars": [\n      {\n        "Avatar": "avatar-public-key",\n        "Subkey": {\n          "PrivateKey": "the-private-key-that-signed-by-avatar",\n          "CertificationSignature": "signature-that-signed-by-avatar"\n        }\n      }\n  ],\n  "Proof": {\n    "Endpoint": "https://proof-service.nextnext.id/"\n  },\n  "Discord": {\n    "ClientID": "123456789012345678",\n    "ClientSecret": "123456789012345678"\n  },\n  "Twitter": {\n    "ClientID": "aBcDEFG...",\n    "ClientSecret": "Hij123456..."\n  }\n  // ...\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"how-to-start-up-an-authservice",children:"How to start up an AuthService"}),"\n",(0,r.jsxs)(t.p,{children:["After preparing the configuration file, we can run it with docker.\n",(0,r.jsx)(t.a,{href:"https://github.com/NextDotID/auth_server#deployment",children:"The auth service source code and instructor on how to run it with docker"})]}),"\n",(0,r.jsx)(t.p,{children:"Firstly, build the Docker image:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker build -t authserver -f ./src/AuthServer.Server/Dockerfile .\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Run the following command to run it once, replace ",(0,r.jsx)(t.code,{children:"/path/to/appsettings.Production.json"})," with your own configuration file path."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run --rm -p 80:80 -v /path/to/appsettings.Production.json:/app/appsettings.Production.json authserver\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3881:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>a});var n=i(8101);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},9762:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/authservice-workflow-f5a91d7d24fdd1c321158852ac04ff0b.png"}}]);