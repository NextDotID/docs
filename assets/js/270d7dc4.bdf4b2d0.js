"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[1490],{1017:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"rest-api/proofservice-api","title":"ProofService API","description":"Entrypoint","source":"@site/docs/rest-api/proofservice-api.md","sourceDirName":"rest-api","slug":"/rest-api/proofservice-api","permalink":"/rest-api/proofservice-api","draft":false,"unlisted":false,"editUrl":"https://github.com/nextdotid/docs/edit/main/docs/rest-api/proofservice-api.md","tags":[],"version":"current","frontMatter":{"title":"ProofService API"},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/core-concepts/core-service/cs-intro"},"next":{"title":"Platforms supported by ProofService","permalink":"/rest-api/proofservice-platforms-supported"}}');var s=r(5105),t=r(3881);const l={title:"ProofService API"},o=void 0,d={},a=[{value:"Entrypoint",id:"entrypoint",level:3},{value:"Structure",id:"structure",level:3},{value:"Supported platforms for proofing",id:"supported-platforms-for-proofing",level:3},{value:"Post struct placeholders",id:"post-struct-placeholders",level:3},{value:"Group Common",id:"group-common",level:2},{value:"General info [GET /healthz]",id:"healthz",level:3},{value:"Group Proof",id:"group-proof",level:2},{value:"Query a proof payload to signature and to post [POST /v1/proof/payload]",id:"proof-payload",level:3},{value:"Add a proof modification into Proof chain [POST /v1/proof]",id:"proof-add",level:3},{value:"Query an existed binding [GET /v1/proof]",id:"proof-query",level:3},{value:"Check if a proof exists [GET /v1/proof/exists]",id:"proof-query-exists",level:3},{value:"Get one single ProofChain under an Avatar [GET /v1/proofchain]",id:"get-one-single-proofchain-under-an-avatar-get-v1proofchain",level:3},{value:"Get separated ProofChain link (aka Changelog of whole server) [GET /v1/proofchain/changes]",id:"get-separated-proofchain-link-aka-changelog-of-whole-server-get-v1proofchainchanges",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"entrypoint",children:"Entrypoint"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Online"}),(0,s.jsx)(n.th,{children:"Environment"}),(0,s.jsx)(n.th,{children:"Entrypoint"}),(0,s.jsx)(n.th,{children:"Healthcheck"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"Staging"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://proof-service.nextnext.id",children:"https://proof-service.nextnext.id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://proof-service.nextnext.id/healthz",children:"https://proof-service.nextnext.id/healthz"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"Production"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://proof-service.next.id",children:"https://proof-service.next.id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://proof-service.next.id/healthz",children:"https://proof-service.next.id/healthz"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"structure",children:"Structure"}),"\n",(0,s.jsxs)(n.p,{children:["All requests and responses should be ",(0,s.jsx)(n.code,{children:"Content-Type: application/json"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"supported-platforms-for-proofing",children:"Supported platforms for proofing"}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"})]}),"\n",(0,s.jsx)(n.h3,{id:"post-struct-placeholders",children:"Post struct placeholders"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"placeholders"}),(0,s.jsx)(n.th,{children:"Should be replaced to"}),(0,s.jsx)(n.th,{children:"Sample"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"%SIG_BASE64%"})}),(0,s.jsx)(n.td,{children:"Base64-encoded signature"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1uZDzxZ6wae+IaF4BgJXWAWC9e/nxbkdC0xp+xRLz1FqeghynyW+SQnGQygdgQYLTLfXqq03nyFQJU0GidQ/3QA="})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"group-common",children:"Group Common"}),"\n",(0,s.jsx)(n.h3,{id:"healthz",children:"General info [GET /healthz]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request (application/json)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 200 (application/json)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes (object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["hello (string, required) - must be ",(0,s.jsx)(n.code,{children:"proof service"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"built_at (string, required) - UNIX Timestamp of when server is built."}),"\n",(0,s.jsx)(n.li,{children:"revision (string, required) - On which git commit is this server built."}),"\n",(0,s.jsxs)(n.li,{children:["environment (string, required) - App environment of this server (",(0,s.jsx)(n.code,{children:"staging"})," / ",(0,s.jsx)(n.code,{children:"production"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["platforms (array[string], required) - All ",(0,s.jsx)(n.code,{children:"platform"}),"s supported by this server."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n      "hello": "proof service",\n      "built_at": "1658210228",\n      "revision": "fffa94639d99c0a707cb7befdb51201ea655896d",\n      "environment": "staging",\n      "platforms": [\n          "github",\n          "twitter",\n          "ethereum",\n          "keybase"\n      ]\n    }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"group-proof",children:"Group Proof"}),"\n",(0,s.jsx)(n.h3,{id:"proof-payload",children:"Query a proof payload to signature and to post [POST /v1/proof/payload]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request (application/json)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes (object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["action (string, required) - Action (",(0,s.jsx)(n.code,{children:"create"})," / ",(0,s.jsx)(n.code,{children:"delete"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["platform (string, required) - Target platform. See table above for all available platforms. See table in ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"})," for all available values."]}),"\n",(0,s.jsxs)(n.li,{children:['identity (string, required) - Identity in target platform to proof. Usually a "username" or "screen name". See ',(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["public_key (string, required) - Public key of Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (",(0,s.jsx)(n.code,{children:"/^0x[0-9a-f]{65,130}$/"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n      "action": "create",\n      "platform": "twitter",\n      "identity": "my_twitter_screen_name",\n      "public_key": "0x04c7cacde73af939c35d527b34e0556ea84bab27e6c0ed7c6c59be70f6d2db59c206b23529977117dc8a5d61fa848f94950422b79d1c142bcf623862e49f9e6575"\n    }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 200 (application/json)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes (object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["post_content (object, required) - Post (in different languages) to let user send / save to target platform.\nPlaceholders should be replaced by frontend / client.\nLanguage code follows BCP-47 standard (i.e. ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a",children:"https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a"})," ).\nNote: there is always a ",(0,s.jsx)(n.code,{children:"default"})," content."]}),"\n",(0,s.jsxs)(n.li,{children:["sign_payload (string, required) - Raw string to be sent to ",(0,s.jsx)(n.code,{children:"personal_sign"})]}),"\n",(0,s.jsxs)(n.li,{children:["uuid (string, required) - UUID of this chain link. Send this UUID to ",(0,s.jsx)(n.code,{children:"POST /v1/proof"})," as-is."]}),"\n",(0,s.jsxs)(n.li,{children:["created_at (string, required) - Creation time of this chain link (UNIX timestamp, unit: second). Send this to ",(0,s.jsx)(n.code,{children:"POST /v1/proof"})," as-is."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n      "post_content": {\n        "default": "Prove myself: I\'m 0x028c3cda474361179d653c41a62f6bbb07265d535121e19aedf660da2924d0b1e3 on Next.ID. Signature: %SIG_BASE64%"\n        "zh_CN": "\u9a8c\u8bc1\u63a8\u7279\u8d26\u53f7 @my_twitter_screen_name \u7684 Next.ID \u8eab\u4efd @NextDotID \u3002\\nSig: %SIG_BASE64%\\n\\n\u8bf7\u4e0b\u8f7d\u5b89\u88c5 mask.io \u53bb\u4f7f\u7528\u60a8 Web 3.0 \u7684\u53bb\u4e2d\u5fc3\u5316\u8eab\u4efd\u3002\\n"\n      },\n      "sign_payload": "{\\"action\\":\\"add\\",\\"identity\\":\\"my_twitter_screen_name\\",\\"platform\\":\\"twitter\\",\\"prev\\":null}"\n      "uuid": "ed9f421d-92e1-4c80-9bff-8516ef46ff43",\n      "created_at": "1647332405"\n    }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"proof-add",children:"Add a proof modification into Proof chain [POST /v1/proof]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request (application/json)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes (object)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["action (string, required) - Action (",(0,s.jsx)(n.code,{children:"create"})," / ",(0,s.jsx)(n.code,{children:"delete"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"platform (string, required) - Target platform. See table above for all available platforms. See table above for all available values."}),"\n",(0,s.jsxs)(n.li,{children:['identity (string, required) - Identity in target platform to proof. Usually a "username" or "screen name". See ',(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["proof_location (string, optional) - Location where public-accessible proof post is set. See ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["public_key (string, required) - Public key of Next.ID Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (",(0,s.jsx)(n.code,{children:"/^0x[0-9a-f]{65,130}$/"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["extra (object, optional) - Extra info for specific platform needed. Leave it empty or don't provide this field if your ",(0,s.jsx)(n.code,{children:"platform"})," or ",(0,s.jsx)(n.code,{children:"action"})," not match these below.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["wallet_signature (string, optional) - (required when ",(0,s.jsx)(n.code,{children:"platform: ethereum"}),") Signature signed by ETH wallet (w/ same sign payload), BASE64-ed."]}),"\n",(0,s.jsxs)(n.li,{children:["signature (string, optional) - (required when ",(0,s.jsx)(n.code,{children:"platform: ethereum"})," or ",(0,s.jsx)(n.code,{children:"action: delete"}),") Signature signed by Avatar private key (w/ same sign payload), BASE64-ed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["uuid (string, required) - UUID of this chain link. Use the exact value from ",(0,s.jsx)(n.code,{children:"POST /v1/proof/payload"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["created_at (string, required) - Creation time of this chain link (UNIX timestamp, unit: second). Use the exact value from ",(0,s.jsx)(n.code,{children:"POST /v1/proof/payload"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n      "action": "create",\n      "platform": "twitter",\n      "identity": "my_twitter_screen_name",\n      "proof_location": "1415362679095635970",\n      "public_key": "0x04c7cacde73af939c35d527b34e0556ea84bab27e6c0ed7c6c59be70f6d2db59c206b23529977117dc8a5d61fa848f94950422b79d1c142bcf623862e49f9e6575",\n      "extra": {},\n      "uuid": "ed9f421d-92e1-4c80-9bff-8516ef46ff43",\n      "created_at": "1647332405"\n    }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 201 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Request submitted successfully."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 400 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Request failed."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"message (string, required) - Contains some error info for user."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n       "message": "Tweet author is not the same as given identity."\n    }\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"proof-query",children:"Query an existed binding [GET /v1/proof]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"platform (string, optional) - Proof platform. If not given, all platforms will be searched."}),"\n",(0,s.jsxs)(n.li,{children:["identity (string, required) - Identity on target platform. Separate identities with comma (",(0,s.jsx)(n.code,{children:","}),") if you want to query mutipe identity at once."]}),"\n",(0,s.jsxs)(n.li,{children:["page (number, optional) - Pagination. First page is number ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["exact (boolean, optional) - Perform a exact match for ",(0,s.jsx)(n.code,{children:"identity"}),". Ambiguous match if not provided."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GET /proof?platform=twitter&identity=my_twitter_screen_name&exact=true"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GET /proof?identity=abc,def&page=3"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 200 (application/json)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["pagination (object, required) - Pagination info","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"total (number, required) - Total amount of results."}),"\n",(0,s.jsxs)(n.li,{children:["per (number, required) - How many ",(0,s.jsx)(n.code,{children:"ids"})," results per page."]}),"\n",(0,s.jsx)(n.li,{children:"current (number, required) - current page number."}),"\n",(0,s.jsxs)(n.li,{children:["next (number, required) - Next page. ",(0,s.jsx)(n.code,{children:"0"})," if current page is the last one."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["ids (array[object], required) - All IDs found. Will be empty array if not found.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"avatar (string, required) - Avatar public key"}),"\n",(0,s.jsx)(n.li,{children:"last_arweave_id (string, required) - Arweave transaction ID of last proof this avatar signed"}),"\n",(0,s.jsxs)(n.li,{children:["proofs (array[object], required) - All proofs under this Avatar","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"platform (string, required) - Platform"}),"\n",(0,s.jsx)(n.li,{children:"identity (string, required) - Identity on that platform"}),"\n",(0,s.jsx)(n.li,{children:"created_at (string, required) - Creation time of this proof. (timestamp, unit: second)"}),"\n",(0,s.jsx)(n.li,{children:"last_checked_at (string, required) - When last validation happened. (timestamp, unit: second)"}),"\n",(0,s.jsx)(n.li,{children:"is_valid (bool, required) - This record is valid or not according to last validation."}),"\n",(0,s.jsx)(n.li,{children:"invalid_reason (string, required) - If not valid, reason will appears here."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n      "pagination": {\n        "total": 27,\n        "per": 10,\n        "current": 1,\n        "next": 2\n      },\n      "ids": [{\n        "avatar": "0x04c7cacde73af939c35d527b34e0556ea84bab27e6c0ed7c6c59be70f6d2db59c206b23529977117dc8a5d61fa848f94950422b79d1c142bcf623862e49f9e6575",\n        "last_arweave_id": "W1-5W8l3EfcSPSlgGJJoRZUObqkXqlXDuQH5cIA53t0",\n        "proofs": [{\n          "platform": "twitter",\n          "identity": "my_twitter_screen_name",\n          "created_at": "1643099438",\n          "last_checked_at": "1643099438",\n          "is_valid": false,\n          "invalid_reason": "tweet not found"\n        }, {\n          "platform": "facebook",\n          "identity": "my_facebook_username",\n          "created_at": "1643099438",\n          "last_checked_at": "1643099438",\n          "is_valid": true,\n          "invalid_reason": ""\n        }]\n      }, {\n        "avatar": "0xANOTHER",\n        "proofs": [{\n          "platform": "ethereum",\n          "identity": "0x114514......",\n          "created_at": "1643099438",\n          "last_checked_at": "1643099438",\n          "is_valid": true,\n          "invalid_reason": ""\n        }]\n      }]\n    }\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note that an empty ",(0,s.jsx)(n.code,{children:"last_arweave_id"})," indicates that the last proof this avatar signed has not been uploaded to Arweave Network yet, please try again later."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"proof-query-exists",children:"Check if a proof exists [GET /v1/proof/exists]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"platform (string, required) - Proof platform."}),"\n",(0,s.jsx)(n.li,{children:"identity (string, required) - Identity on target platform."}),"\n",(0,s.jsxs)(n.li,{children:["public_key (string, required) - Public key of Next.ID Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (",(0,s.jsx)(n.code,{children:"/^0x[0-9a-f]{65,130}$/"}),")"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GET /v1/proof/exists?platform=twitter&identity=some_twitter_screenname&public_key=0x04c7cacde73af939c35d527b34e0556ea84bab27e6c0ed7c6c59be70f6d2db59c206b23529977117dc8a5d61fa848f94950422b79d1c142bcf623862e49f9e6575"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 200 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Found."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"created_at (string, required) - Createtion time of this proof. (timestamp, unit: second)"}),"\n",(0,s.jsx)(n.li,{children:"last_checked_at (string, required) - When last validation happened. (timestamp, unit: second)"}),"\n",(0,s.jsx)(n.li,{children:"is_valid (bool, required) - This record is valid or not according to last validation."}),"\n",(0,s.jsx)(n.li,{children:"invalid_reason (string, required) - If not valid, reason will appears here."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "created_at": "1643099438",\n  "last_checked_at": "1643099438",\n  "is_valid": true,\n  "invalid_reason": ""\n}\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 404 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Not found."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"message (string, required) - Message of which part goes wrong."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-one-single-proofchain-under-an-avatar-get-v1proofchain",children:"Get one single ProofChain under an Avatar [GET /v1/proofchain]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["public_key (string, required) - Public key of NextID Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (",(0,s.jsx)(n.code,{children:"/^0x[0-9a-f]{65,130}$/"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["page (number, optional) - Pagination. First page is number ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GET /v1/proofchain?public_key=0x028c3cda474361179d653c41a62f6bbb07265d535121e19aedf660da2924d0b1e3&page=1"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 200 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Found."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"pagination (object, required) - Pagination info"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"total (number, required) - Total amount of results."}),"\n",(0,s.jsxs)(n.li,{children:["per (number, required) - How many ",(0,s.jsx)(n.code,{children:"proof item"})," results per page."]}),"\n",(0,s.jsx)(n.li,{children:"current (number, required) - current page number."}),"\n",(0,s.jsxs)(n.li,{children:["next (number, required) - Next page. ",(0,s.jsx)(n.code,{children:"0"})," if current page is the last one."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"proof_chain (array[object], required) - Will be empty array if not found."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"action (string, required) - Action(create / delete)"}),"\n",(0,s.jsx)(n.li,{children:"platform (string, required) - Target platform. See table above for all available platforms. See table above for all available values."}),"\n",(0,s.jsx)(n.li,{children:"identity (string, required) - Identity on that platform"}),"\n",(0,s.jsxs)(n.li,{children:["proof_location (string, required) - Location where public-accessible proof post is set. See ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"created_at (string, required) - Creation time of this proof. (timestamp, unit: second)"}),"\n",(0,s.jsx)(n.li,{children:"signature (string, required) - generate signature_payload and avatar_private_key"}),"\n",(0,s.jsxs)(n.li,{children:["signature_payload (string, required) - Raw string to be sent to ",(0,s.jsx)(n.code,{children:"personal_sign"})]}),"\n",(0,s.jsx)(n.li,{children:"extra (string, optional) -  Extra info for specific platform needed."}),"\n",(0,s.jsxs)(n.li,{children:["uuid (string, required) - UUID of this chain link. Use the exact value from ",(0,s.jsx)(n.code,{children:"POST /v1/proof/payload"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"arweave_id (string, required) - Arweave transaction ID of this proof"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n        "pagination":{\n            "total":1,\n            "per":20,\n            "current":1,\n            "next":0\n        },\n        "proof_chain":[\n            {\n                "action":"create",\n                "platform":"twitter",\n                "identity":"yeiwb",\n                "proof_location":"1469221200140574720",\n                "created_at":"1648023422",\n                "signature":"gMUJ75eewkdaNrFp7bafzckv9+rlW7rVaxkB7/sYzYgFdFltYG+gn0lYzVNgrAdHWZPmu2giwJniGG7HG9iNigE=",\n                "signature_payload":"",\n                "uuid":"",\n                "arweave_id": "",\n                "extra":{\n\n                }\n            }\n        ]\n    }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 400 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Params error."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 500 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Internal error."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"message (string, required) - Message of which part goes wrong."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"get-separated-proofchain-link-aka-changelog-of-whole-server-get-v1proofchainchanges",children:"Get separated ProofChain link (aka Changelog of whole server) [GET /v1/proofchain/changes]"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Request"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['last_id (number, required) - The "cursor" indicates where to start. Usually the maximum ',(0,s.jsx)(n.code,{children:"id"})," from previous request's response. If you want to start a new server iteration, set it to ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["count (number, optional) - How meny records to return in a request, should be ",(0,s.jsx)(n.code,{children:"10 <= count <= 100"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GET /v1/proofchain/changes?id=203&count=20"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 200 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Found."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["links (array[object], required) - Each link of every ProofChain.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'id (number, required) - ProofChain link ID in ProofService\'s database. Can be used as the "cursor" in query.'}),"\n",(0,s.jsx)(n.li,{children:"avatar (string, required) - Which Avatar this link belongs to."}),"\n",(0,s.jsxs)(n.li,{children:["action (string, required) - Action (",(0,s.jsx)(n.code,{children:"create"})," / ",(0,s.jsx)(n.code,{children:"delete"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["platform (string, required) - Target platform. See ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"})," for all supported platforms."]}),"\n",(0,s.jsxs)(n.li,{children:["identity (string, required) - Identity on that platform. See ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"})," for the meaning of this field.."]}),"\n",(0,s.jsxs)(n.li,{children:["proof_location (string, required) - Location where public-accessible proof post is set. See ",(0,s.jsx)(n.a,{href:"proofservice-platforms-supported",children:"Platform supported"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"created_at (string, required) - Creation time of this proof. (timestamp, unit: second)"}),"\n",(0,s.jsx)(n.li,{children:"signature (string, required) - generate signature_payload and avatar_private_key"}),"\n",(0,s.jsxs)(n.li,{children:["signature_payload (string, required) - Raw string to be sent to ",(0,s.jsx)(n.code,{children:"personal_sign"})]}),"\n",(0,s.jsx)(n.li,{children:"extra (string, optional) -  Extra info for specific platform needed."}),"\n",(0,s.jsxs)(n.li,{children:["uuid (string, required) - UUID of this chain link. Use the exact value from ",(0,s.jsx)(n.code,{children:"POST /v1/proof/payload"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"arweave_id (string, required) - Arweave transaction ID of this ProofChain link."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n        "links":[\n            {\n                "id": 204,\n                "avatar": "0x028c3cda474361179d653c41a62f6bbb07265d535121e19aedf660da2924d0b1e3",\n                "action": "create",\n                "platform": "twitter",\n                "identity": "yeiwb",\n                "proof_location": "1469221200140574720",\n                "created_at": "1648023422",\n                "signature": "gMUJ75eewkdaNrFp7bafzckv9+rlW7rVaxkB7/sYzYgFdFltYG+gn0lYzVNgrAdHWZPmu2giwJniGG7HG9iNigE=",\n                "signature_payload": "",\n                "uuid": "",\n                "arweave_id": "",\n                "extra": {}\n            }\n        ]\n    }\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 400 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Params error."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Response 500 (application/json)"}),"\n",(0,s.jsx)(n.p,{children:"Internal error."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"message (string, required) - Message of which part goes wrong."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},3881:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var i=r(8101);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);