"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[7263],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(n),g=a,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7263),a=(n(9496),n(9613));n(8378);const o={title:"TypeScript"},i=void 0,c={unversionedId:"developer-guide/typescript",id:"developer-guide/typescript",title:"TypeScript",description:"Proof Service",source:"@site/docs/developer-guide/typescript.md",sourceDirName:"developer-guide",slug:"/developer-guide/typescript",permalink:"/developer-guide/typescript",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/developer-guide/typescript.md",tags:[],version:"current",frontMatter:{title:"TypeScript"}},p={},l=[{value:"Proof Service",id:"proof-service",level:2},{value:"Relation Service",id:"relation-service",level:2}],s={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"proof-service"},"Proof Service"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You could git clone and run ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nextdotid/Signature-Generating-Sample/tree/main/typescript"},"TypeScript open demo")," for help.")),(0,a.kt)("p",null,"The core example of codes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package.json"',title:'"package.json"'},'{\n  "dependencies": {\n    "ethereumjs-util": "^7.1.4"\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},'import { ecsign, toRpcSig, keccakFromString, BN } from \'ethereumjs-util\';\n\nasync function personalSign(message: Buffer, privateKey: Buffer): Promise<Buffer> {\n    const messageHash = keccakFromString(`\\x19Ethereum Signed Message:\\n${message.length}${message}`, 256)\n    const signature = ecsign(messageHash, privateKey)\n    return Buffer.from(toRpcSig(signature.v, signature.r, signature.s).slice(2), \'hex\')\n}\n\nasync function main() {\n    // this message come from the return attribute "sign_payload" of everytime calling API: v1/proof/payload\n    const message = Buffer.from(\'{\\"action\\":\\"create\\",\\"created_at\\":\\"1656843378\\",\\"identity\\":\\"your_twitter_handle\\",\\"platform\\":\\"twitter\\",\\"prev\\":\\"KNyNFtvhlRVJh/oU6RryK2n+C2dja9aLQPjlv5VHMsQErZROojEmMAgmeEQVC094EOuHIYcv3lCYXf8d3zqDCQE=\\",\\"uuid\\":\\"353449e6-3a6f-4ac8-ae65-ba14bf466baf\\"}\', \'utf8\');\n    // ATTENTION! We intently replaced the last three digit of private key to be xxx.\n    // Private key is everything and NEVER expose it to others or publicly\n    const secretKey = Buffer.from(\'43c25fecc20e6b2a0d86c81a0202d125c0181deb9975d1170d80378c7e05bxxx\', \'hex\');\n    const signature = await personalSign(message, secretKey);\n\n    console.log(`Signature: 0x${signature.toString(\'hex\')}`);\n    // For demo ONLY\n    // Signature: 0xf72fe6b00be411bd70ffe1b9bf322f18529ea10e9559dd26ba10387544849fc86d712709dfb709efc3dcc0a01b6f6b9ca98bd48fe780d58921f4926c6f2c0b871b\n\n    console.log(`Signature(base64): ${signature.toString(\'base64\')}`);\n    // For demo ONLY\n    // Signature(base64): 9y/msAvkEb1w/+G5vzIvGFKeoQ6VWd0muhA4dUSEn8htcScJ37cJ78PcwKAbb2ucqYvUj+eA1Ykh9JJsbywLhxs=\n}\n\nmain();\n')),(0,a.kt)("h2",{id:"relation-service"},"Relation Service"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You could git clone and run ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nextdotid/sdk/tree/feat/relation/src/relation"},"TypeScript relation service codegen demo")," for help.")),(0,a.kt)("p",null,"For typescript projects, we encourage to use ",(0,a.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/"},"GraphQL Code Generator")," to generate code from your very own GraphQL queries and remote schema."),(0,a.kt)("p",null,"To install and configure GraphQL Code Generator, you can add following dependencies or check its ",(0,a.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/docs/getting-started/installation"},"official installation guide"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "codegen": "graphql-codegen --config codegen.yml"\n  },  \n  "dependencies": {\n    "graphql": "^16.5.0"\n  },\n  "devDependencies": {\n    "@graphql-codegen/cli": "2.11.6",\n    "@graphql-codegen/introspection": "2.2.1",\n    "@graphql-codegen/typescript": "^2.7.3",\n    "@graphql-codegen/typescript-graphql-request": "^4.5.3",\n    "@graphql-codegen/typescript-operations": "^2.5.3",\n    "@graphql-codegen/typescript-resolvers": "2.7.3",\n  }\n}\n')),(0,a.kt)("p",null,"Configure ",(0,a.kt)("inlineCode",{parentName:"p"},"codegen.yml")," manually as following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="codegen.yml"',title:'"codegen.yml"'},"overwrite: true\nschema: 'https://relation-service.next.id/'\ndocuments: 'graphql/**/*.graphql'\ngenerates:\n  graphql.ts:\n    plugins:\n      - 'typescript'\n      - 'typescript-operations'\n      - 'typescript-graphql-request'\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note that the schema URL for staging server is ",(0,a.kt)("a",{parentName:"p",href:"https://relation-service.nextnext.id/"},"https://relation-service.nextnext.id/"),", and for production server is ",(0,a.kt)("a",{parentName:"p",href:"https://relation-service.next.id/"},"https://relation-service.next.id/"),".")),(0,a.kt)("p",null,"You can place pre-configured GraphQL queries in the ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql/")," folder as the ",(0,a.kt)("inlineCode",{parentName:"p"},"documents")," field specified in ",(0,a.kt)("inlineCode",{parentName:"p"},"codegen.yml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="graphql/getTwitterUserNeighbors.graphql"',title:'"graphql/getTwitterUserNeighbors.graphql"'},'query getTwitterUserNeighbors($id: String!, $depth: Int!) {\n  identity(platform: "twitter", identity: $id) {\n    addedAt\n    neighborWithTraversal(depth: $depth) {\n      fetcher\n      source\n      createdAt\n      uuid\n      from {\n        uuid\n        identity\n        platform\n        displayName\n      }\n      to {\n        uuid\n        platform\n        identity\n        displayName\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"From now on, run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run codegen")," to generate code from all your GraphQL queries, and then introduce the generated code to your project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"import { GraphQLClient } from 'graphql-request'\nimport { getSdk } from './graphql'\n\nasync function main() {\n    const client = new GraphQLClient('https://relation-service.next.id/');\n    const sdk = getSdk(client);\n    const result = await sdk.getTwitterUserNeighbors({\n        id: 'your_twitter_handle',\n        depth: 2\n    });\n    console.log('Twitter user relation query result', result);\n}\n")))}u.isMDXComponent=!0},8378:(e,t,n)=>{n(9496)}}]);