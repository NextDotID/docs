"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[2268],{9613:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var r=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(h,o(o({ref:t},p),{},{components:a})):r.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7084:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7263),n=(a(9496),a(9613));a(8378);const i={id:"ks-intro",title:"Decentralized Storage, KV Service",sidebar_position:3},o=void 0,s={unversionedId:"core-concepts/proof-service/ks-intro",id:"core-concepts/proof-service/ks-intro",title:"Decentralized Storage, KV Service",description:"While developing the Next.ID, we found that we still need a place to keep some customized data in some cases. However, placing everything on the blockchain wasn't a reasonable choice. This led us to create the KV service as a user-friendly tool for storing some customized data. Through cryptographic verification, the KV Service ensures that only the avatar's owner can manage (create and modify) its content, while allowing others to read it.",source:"@site/docs/core-concepts/proof-service/kvservice.md",sourceDirName:"core-concepts/proof-service",slug:"/core-concepts/proof-service/ks-intro",permalink:"/core-concepts/proof-service/ks-intro",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/core-concepts/proof-service/kvservice.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"ks-intro",title:"Decentralized Storage, KV Service",sidebar_position:3},sidebar:"docs",previous:{title:"Web3 Auth, Auth Service",permalink:"/core-concepts/proof-service/as-intro"},next:{title:"Introduction",permalink:"/core-concepts/relation-service/rs-intro"}},l={},c=[{value:"How it works",id:"how-it-works",level:2},{value:"Work Flow for writing",id:"work-flow-for-writing",level:3},{value:"Query data",id:"query-data",level:3},{value:"Design",id:"design",level:3},{value:"Notice",id:"notice",level:3},{value:"Use Case - as a persistence storage",id:"use-case---as-a-persistence-storage",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(d,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"While developing the Next.ID, we found that we still need a place to keep some customized data in some cases. However, placing everything on the blockchain wasn't a reasonable choice. This led us to create the KV service as a user-friendly tool for storing some customized data. Through cryptographic verification, the ",(0,n.kt)("inlineCode",{parentName:"p"},"KV Service")," ensures that only the avatar's owner can manage (create and modify) its content, while allowing others to read it."),(0,n.kt)("h2",{id:"how-it-works"},"How it works"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"KV Service")," can store any valid JSON object data. There are serval APIs for reading and writing the data."),(0,n.kt)("h3",{id:"work-flow-for-writing"},"Work Flow for writing"),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(3947).Z,width:"1080",height:"1080"})),(0,n.kt)("p",null,"The generation signature and verification steps to guarantee the modification request is from the owner of Avatar."),(0,n.kt)("h3",{id:"query-data"},"Query data"),(0,n.kt)("p",null,"After writing the data, everyone can get it via API.See ",(0,n.kt)("a",{parentName:"p",href:"/rest-api/kvservice-api#query"},"GET /v1/kv"),"."),(0,n.kt)("h3",{id:"design"},"Design"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Each user has ",(0,n.kt)("inlineCode",{parentName:"p"},"1 + N")," namespaces\uff1a"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/introduction/how-it-works#avatars-in-nextid"},"Avatar")," itself has a namespace (",(0,n.kt)("inlineCode",{parentName:"li"},'platform == "nextid" && identity == "0xAVATAR_PUBLIC_KEY"'),")",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"There's no limitation that ",(0,n.kt)("a",{parentName:"li",href:"/introduction/how-it-works#avatars-in-nextid"},"Avatar")," should be used in ",(0,n.kt)("a",{parentName:"li",href:"ps-intro"},"ProofService")," once."))),(0,n.kt)("li",{parentName:"ul"},"Each ",(0,n.kt)("a",{parentName:"li",href:"./ps-intro#data-structure"},"binding record")," (in ",(0,n.kt)("a",{parentName:"li",href:"ps-intro"},"ProofService"),") of each ",(0,n.kt)("a",{parentName:"li",href:"/introduction/how-it-works#avatars-in-nextid"},"Avatar")," has a namespace.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Value of ",(0,n.kt)("inlineCode",{parentName:"li"},"platform")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"identity")," are the same as ",(0,n.kt)("a",{parentName:"li",href:"./ps-intro#supported-platform"},"supported platforms")," in ProofService."))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"/rest-api/kvservice-api#query"},"Query data"),": public, only need to specify ",(0,n.kt)("inlineCode",{parentName:"p"},"avatar"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"/rest-api/kvservice-api#payload"},"Write data"),": A patch followed ",(0,n.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7396"},"RFC 7396")," standard."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"A glimpse of RFC7396"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},'// Assume current data is:\n{\n  "a": {\n    "b": [2, 3, 4, "test"]\n  },\n  "c": "Hello"\n}\n\n// If this patch is submitted:\n{ "a": { "b": null, "new_key": true }, "c": "KVService" }\n\n// Then patched data will become:\n{\n  "a": {\n    "new_key": true\n  },\n  "c": "KVService"\n}\n// Notice: nested modification of Array value is not supported.\n//         Replace the whole Array with new value instead.\n'))))),(0,n.kt)("h3",{id:"notice"},"Notice"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'Each app should use its "package name" as its own namespace, to ensure other apps are not infected by your modification.'),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"For example, I as a developer, identify my app as ",(0,n.kt)("inlineCode",{parentName:"p"},"io.mask.web3-profile-plugin"),","),(0,n.kt)("p",{parentName:"blockquote"},"Then I should make the modifications under ",(0,n.kt)("inlineCode",{parentName:"p"},'{ "io.mask.web3-profile-plugin": .... }')," key."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Theoretically, there is no size limitation for data. FairUse\u2122\ufe0f, please."),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"If you want to store data bigger than a string can handle, consider ",(0,n.kt)("a",{parentName:"p",href:"https://www.arweave.org"},"Arweave"),".")))),(0,n.kt)("h2",{id:"use-case---as-a-persistence-storage"},"Use Case - as a persistence storage"),(0,n.kt)("p",null,"You can use ",(0,n.kt)("inlineCode",{parentName:"p"},"KV Service")," to store the data that needs cross-session persistence."),(0,n.kt)("p",null,"For example, you can store the user's avatar, nick name, bio, show/hide status of NFT list, or order of these contents, under your web3 app's scenarios."),(0,n.kt)("p",null,"Using ",(0,n.kt)("inlineCode",{parentName:"p"},"KV Service")," gives you some benefits:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The change made by the user is verifiable by other user/applications, aka platform-independent. No one (except the user himself) can change the data without a valid signature."),(0,n.kt)("li",{parentName:"ul"},"The data is stored in a decentralized way, no matter where this data is actually stored. User always has a choice to move their data to other (or self-hosted) platforms.",(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},'The actual "migration" function is still under development.')))))}u.isMDXComponent=!0},3947:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/kvservice-workflow-3590cff61c71a6e69d03bd07f8cd17c5.png"},8378:(e,t,a)=>{a(9496)}}]);