"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[4256],{523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"developer-guide/typescript","title":"TypeScript","description":"Proof Service","source":"@site/docs/developer-guide/typescript.md","sourceDirName":"developer-guide","slug":"/developer-guide/typescript","permalink":"/developer-guide/typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/nextdotid/docs/edit/main/docs/developer-guide/typescript.md","tags":[],"version":"current","frontMatter":{"title":"TypeScript"}}');var i=t(5105),s=t(3881);const o={title:"TypeScript"},c=void 0,a={},d=[{value:"Proof Service",id:"proof-service",level:2},{value:"Relation Service",id:"relation-service",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"proof-service",children:"Proof Service"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["You could git clone and run ",(0,i.jsx)(n.a,{href:"https://github.com/nextdotid/Signature-Generating-Sample/tree/main/typescript",children:"TypeScript open demo"})," for help."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The core example of codes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "ethereumjs-util": "^7.1.4"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:'import { ecsign, toRpcSig, keccakFromString, BN } from \'ethereumjs-util\';\n\nasync function personalSign(message: Buffer, privateKey: Buffer): Promise<Buffer> {\n    const messageHash = keccakFromString(`\\x19Ethereum Signed Message:\\n${message.length}${message}`, 256)\n    const signature = ecsign(messageHash, privateKey)\n    return Buffer.from(toRpcSig(signature.v, signature.r, signature.s).slice(2), \'hex\')\n}\n\nasync function main() {\n    // this message come from the return attribute "sign_payload" of everytime calling API: v1/proof/payload\n    const message = Buffer.from(\'{\\"action\\":\\"create\\",\\"created_at\\":\\"1656843378\\",\\"identity\\":\\"your_twitter_handle\\",\\"platform\\":\\"twitter\\",\\"prev\\":\\"KNyNFtvhlRVJh/oU6RryK2n+C2dja9aLQPjlv5VHMsQErZROojEmMAgmeEQVC094EOuHIYcv3lCYXf8d3zqDCQE=\\",\\"uuid\\":\\"353449e6-3a6f-4ac8-ae65-ba14bf466baf\\"}\', \'utf8\');\n\t// ATTENTION! We intently replaced the last three digit of private key to be xxx.\n\t// Private key is everything and NEVER expose it to others or publicly\n    const secretKey = Buffer.from(\'43c25fecc20e6b2a0d86c81a0202d125c0181deb9975d1170d80378c7e05bxxx\', \'hex\');\n    const signature = await personalSign(message, secretKey);\n\n    console.log(`Signature: 0x${signature.toString(\'hex\')}`);\n    // For demo ONLY\n    // Signature: 0xf72fe6b00be411bd70ffe1b9bf322f18529ea10e9559dd26ba10387544849fc86d712709dfb709efc3dcc0a01b6f6b9ca98bd48fe780d58921f4926c6f2c0b871b\n\n    console.log(`Signature(base64): ${signature.toString(\'base64\')}`);\n    // For demo ONLY\n    // Signature(base64): 9y/msAvkEb1w/+G5vzIvGFKeoQ6VWd0muhA4dUSEn8htcScJ37cJ78PcwKAbb2ucqYvUj+eA1Ykh9JJsbywLhxs=\n}\n\nmain();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"relation-service",children:"Relation Service"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["You could git clone and run ",(0,i.jsx)(n.a,{href:"https://github.com/nextdotid/sdk/tree/feat/relation/src/relation",children:"TypeScript relation service codegen demo"})," for help."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For typescript projects, we encourage to use ",(0,i.jsx)(n.a,{href:"https://www.graphql-code-generator.com/",children:"GraphQL Code Generator"})," to generate code from your very own GraphQL queries and remote schema."]}),"\n",(0,i.jsxs)(n.p,{children:["To install and configure GraphQL Code Generator, you can add following dependencies or check its ",(0,i.jsx)(n.a,{href:"https://www.graphql-code-generator.com/docs/getting-started/installation",children:"official installation guide"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="package.json"',children:'{\n  "scripts": {\n    "codegen": "graphql-codegen --config codegen.yml"\n  },  \n  "dependencies": {\n    "graphql": "^16.5.0"\n  },\n  "devDependencies": {\n    "@graphql-codegen/cli": "2.11.6",\n    "@graphql-codegen/introspection": "2.2.1",\n    "@graphql-codegen/typescript": "^2.7.3",\n    "@graphql-codegen/typescript-graphql-request": "^4.5.3",\n    "@graphql-codegen/typescript-operations": "^2.5.3",\n    "@graphql-codegen/typescript-resolvers": "2.7.3",\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Configure ",(0,i.jsx)(n.code,{children:"codegen.yml"})," manually as following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:'title="codegen.yml"',children:"overwrite: true\nschema: 'https://relation-service.next.id/'\ndocuments: 'graphql/**/*.graphql'\ngenerates:\n  graphql.ts:\n    plugins:\n      - 'typescript'\n      - 'typescript-operations'\n      - 'typescript-graphql-request'\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Note that the schema URL for staging server is ",(0,i.jsx)(n.a,{href:"https://relation-service.nextnext.id/",children:"https://relation-service.nextnext.id/"}),", and for production server is ",(0,i.jsx)(n.a,{href:"https://relation-service.next.id/",children:"https://relation-service.next.id/"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can place pre-configured GraphQL queries in the ",(0,i.jsx)(n.code,{children:"graphql/"})," folder as the ",(0,i.jsx)(n.code,{children:"documents"})," field specified in ",(0,i.jsx)(n.code,{children:"codegen.yml"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:'title="graphql/getTwitterUserNeighbors.graphql"',children:'query getTwitterUserNeighbors($id: String!, $depth: Int!) {\n  identity(platform: "twitter", identity: $id) {\n    addedAt\n    neighborWithTraversal(depth: $depth) {\n      fetcher\n      source\n      createdAt\n      uuid\n      from {\n        uuid\n        identity\n        platform\n        displayName\n      }\n      to {\n        uuid\n        platform\n        identity\n        displayName\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["From now on, run ",(0,i.jsx)(n.code,{children:"npm run codegen"})," to generate code from all your GraphQL queries, and then introduce the generated code to your project."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="index.ts"',children:"import { GraphQLClient } from 'graphql-request'\nimport { getSdk } from './graphql'\n\nasync function main() {\n    const client = new GraphQLClient('https://relation-service.next.id/');\n    const sdk = getSdk(client);\n    const result = await sdk.getTwitterUserNeighbors({\n        id: 'your_twitter_handle',\n        depth: 2\n    });\n    console.log('Twitter user relation query result', result);\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},3881:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(8101);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);